import cv2
import math
import numpy as np
import time
import tkinter
from camera_utils.camera_reader import CameraReader
from camera_utils.export_calibration import find_max_playing_mask
from camera_utils.shape_detector import ShapeDetector
from camera_utils.table_detector import TableDetector
import os


class AutoCalibrator:
    def __init__(self):
        self.calibrate_success = False
        self.screen_width, self.screen_height = self.get_screen_res()
        self.shapeDetector = ShapeDetector()
        self.warp_mat_depth_2_cam = np.eye(3)
        self.projection_flip_type = "none"

    def get_screen_res(self):
        root = tkinter.Tk()
        root.withdraw()
        return root.winfo_screenwidth(), root.winfo_screenheight()

    def start(self):
        self.tableDetector = TableDetector()
        self.camera = CameraReader(display=False)
        cv2.namedWindow("chessboard_fullscreen", cv2.WINDOW_NORMAL)
        cv2.setWindowProperty("chessboard_fullscreen", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
        depth_map = self.camera.get_depth()
        self.table_mask = np.uint8(np.ones((depth_map.shape[0], depth_map.shape[1], 3))*255)  # entire field of view is default
        self.warp_mat_cam_2_displayed = np.eye(3)

    def calibrate(self):
        self.start()
        for try_num in range(10):
            depth_map = self.camera.get_depth()
            rgb = self.camera.get_rgb()
            self.table_contour = self.tableDetector.detect_table(depth_map, rgb)
            if self.table_contour is not None:
                self.table_mask = np.zeros_like(self.table_mask)
                self.table_mask = cv2.drawContours(image=self.table_mask, contours=[self.table_contour], contourIdx=0, color=(255, 255, 255),
                                 thickness=-1)
                break #if contour found use it

        self.detect_chessboard_with_running_window_and_find_homography()
        self.stop_and_clean_up()

    def calibrate_rgb_to_depth(self, depth_registered):
        depth_binary = depth_registered > 0
        _, contours, _ = cv2.findContours(np.uint8(depth_binary*255), cv2.RETR_EXTERNAL, 2)
        contour_len = [contour.shape[0] for contour in contours]
        approx = np.squeeze(cv2.approxPolyDP(contours[np.array(contour_len).argmax()], 100, True), axis=1)

        pts_rgb = np.array([[0, 0], [depth_registered.shape[1], 0],
                            [depth_registered.shape[1], depth_registered.shape[0]], [0, depth_registered.shape[0]]])
        distances = np.power(pts_rgb[:,0].reshape(-1,1)- approx[:,0].reshape((1,-1)),2) + \
                    np.power(pts_rgb[:,1].reshape(-1,1)- approx[:,1].reshape((1,-1)),2)
        pts_depth = np.array([approx[distances[0, :].argmin(),:], approx[distances[1, :].argmin(),:],
                              approx[distances[2, :].argmin(),:],approx[distances[3, :].argmin(),:]])
        self.warp_mat_depth_2_cam = cv2.getPerspectiveTransform(np.float32(np.expand_dims(pts_rgb, axis=1)),
                                                                np.float32(np.expand_dims(pts_depth, axis=1)))

        # backtransformed = cv2.transform(np.expand_dims(np.float32(pts_depth), axis=1), self.warp_mat_depth_2_cam)
        # backtransformed = np.squeeze(backtransformed, axis=1)
        # backtransformed = backtransformed[:,:2]/backtransformed[:,2].reshape((-1,1))
        # hi = 5




    def detect_chessboard_with_running_window_and_find_homography(self):
        windows = [self.display_grid_and_try_to_detect(i, j)
                   for i in np.nditer(np.arange(0, 1.0, 0.1))
                   for j in np.nditer(np.arange(0, 1.0, 0.1))]
        valid_windows = [window[1] for window in windows if window[0]]
        if len(valid_windows) > 0:
            corners_cam_valid = np.concatenate(valid_windows, axis=0)
            corners_displayed_valid = np.concatenate([window[2] for window in windows if window[0]], axis=0)
            self.set_homography_from_matching_corners(corners_cam_valid, corners_displayed_valid)

    def set_homography_from_matching_corners(self, corners_cam, corners_displayed):
        if corners_cam.shape[0] >= 8 * 4:  # at least four detections of chessboard pattern
            flip_types = ['none', 'ud', 'lr', 'lr_ud']
            trans_inliers = [cv2.findHomography(corners_cam, self.correct_corners_for_potential_flip(
                corners_displayed, flip_type=flip_type), method=cv2.RANSAC, ransacReprojThreshold=1, maxIters=10000)
                for flip_type in flip_types]  # method=cv2.LMEDS
            inliers_perc = np.array([ set[1].mean() for set in trans_inliers])
            warp_mat = trans_inliers[inliers_perc.argmax()][0]

            '''               
            corner_cam_3d = np.concatenate([self.table_contour, np.ones((self.table_contour.shape[0], 1, 1), dtype=np.uint8)], axis=2)
            corners_displayed_3d = cv2.transform(np.float32(corner_cam_3d), warp_mat)
            corners_displayed_2d = corners_displayed_3d[:,0,:2]/corners_displayed_3d[:,0,2].reshape(-1,1)
            # reproj_eror =  corners_displayed_2d - \
            #                 self.correct_corners_for_potential_flip(corners_displayed, flip_types[inliers_perc.argmax()]).reshape(-1,2)

            mask_transformed = cv2.warpPerspective(np.float32(self.table_mask), warp_mat, (self.screen_width, self.screen_height))
            rbg = np.ones((self.screen_height, self.screen_width, 3)) * 255 * mask_transformed
            for idx in range(corners_displayed_2d.shape[0]):
                try:
                    rbg = cv2.circle(rbg,(int(corners_displayed_2d[idx,0]),int(corners_displayed_2d[idx,1])), 3, (0, 255, 0), -1)
                except:
                    pass

            corner_cam_3d = np.concatenate(
                [corners_cam, np.ones((corners_cam.shape[0], 1, 1), dtype=np.uint8)], axis=2)
            corners_displayed_3d = cv2.transform(corner_cam_3d, warp_mat)
            corners_displayed_2d = corners_displayed_3d[:, 0, :2] / corners_displayed_3d[:, 0, 2].reshape(-1, 1)
            for idx in range(corners_displayed_2d.shape[0]):
                try:
                    rbg = cv2.circle(rbg,(int(corners_displayed_2d[idx,0]),int(corners_displayed_2d[idx,1])), 10, (255, 0, 0), -1)
                except:
                    pass

            cv2.namedWindow("corners", cv2.WND_PROP_FULLSCREEN)
            cv2.setWindowProperty("corners", cv2.WND_PROP_FULLSCREEN,
                                  cv2.WINDOW_FULLSCREEN)
            cv2.imshow("corners", rbg)
            cv2.waitKey(0)
            cv2.destroyWindow("corners")
            '''

            if inliers_perc.max() <= .35:
                print('failed to calibrate - did not detect chessboard patterns properly')
            else:
                self.calibrate_success = True
                self.projection_flip_type = flip_types[inliers_perc.argmax()]
                print('succesfuly calibrated')
                self.warp_mat_cam_2_displayed = warp_mat

        else:
            print('failed to calibrate - unable to detect enough chessboard patterns')

    def correct_corners_for_potential_flip(self, corners_displayed, flip_type='ud'):
        corners_displayed_corrected = corners_displayed.copy()
        if flip_type == 'ud' or flip_type == 'lr_ud':
            corners_displayed_corrected[0::2, :, 1] = corners_displayed[1::2, :, 1]
            corners_displayed_corrected[1::2, :, 1] = corners_displayed[0::2, :, 1]
        if flip_type == 'lr' or flip_type == 'lr_ud':
            corners_displayed_corrected[0::2, :, 0] = corners_displayed[1::2, :, 0]
            corners_displayed_corrected[1::2, :, 0] = corners_displayed[0::2, :, 0]
        return corners_displayed_corrected


    def find_center_of_table(self):
        return np.array([[i, j] for i in np.nditer(np.arange(0, 1.0, 0.1))
                         for j in np.nditer(np.arange(0, 1.0, 0.1))
                         if self.display_grid_and_try_to_detect(i, j)[0]]).mean(axis=0)

    def display_grid_and_try_to_detect(self, percent_i, percent_j):
        grid_img_displayed = self.display_gird(percent_i, percent_j)
        #self.save_grid_iamges(grid_img_displayed, percent_i, percent_j, add_label=False)
        rgb_with_table_mask = self.camera.get_rgb(mask=np.uint8(self.table_mask > 0))
        return self.detect_chessboard(rgb_with_table_mask, grid_img_displayed)

    def save_grid_iamges(self, grid_img_displayed, percent_i, percent_j, add_label=False ):
        if add_label:
            grid_img_displayed = cv2.putText(grid_img_displayed, "%d, %d "%(percent_i*100, percent_j*100),
                                          (50, 100), cv2.FONT_HERSHEY_COMPLEX_SMALL, 5, (0, 0, 0), thickness=3)
        cv2.imwrite("%d_%d.png "%(percent_i*100, percent_j*100), grid_img_displayed)

    def display_gird(self, percent_i, percent_j):
        grid_img_displayed = self.create_local_chessboard_img(np.array([percent_i, percent_j]))
        cv2.imshow('chessboard_fullscreen', grid_img_displayed)
        cv2.waitKey(1)
        time.sleep(.1)
        return grid_img_displayed

    def is_chessboard_detected(self, rbg_with_table_mask, grid_img_displayed):
        return self.detect_chessboard(rbg_with_table_mask, grid_img_displayed)[0]

    def detect_chessboard(self, rbg_with_table_mask, grid_img_displayed):
        # # find checkerboard in image
        table_only_gray = cv2.cvtColor(np.uint8(rbg_with_table_mask), cv2.COLOR_BGR2GRAY)
        ret_cam, corners_cam_curr = cv2.findChessboardCorners(table_only_gray, (4, 4), None)
        ret_displayed, corners_displayed_curr = cv2.findChessboardCorners(grid_img_displayed, (4, 4), None)



        if ret_cam and ret_displayed:
            # cv2.waitKey(0)
            # img = cv2.drawChessboardCorners(rbg_with_table_mask, (4, 4), corners_cam_curr, ret_cam)
            # cv2.namedWindow("corners", cv2.WND_PROP_FULLSCREEN)
            # cv2.setWindowProperty("corners", cv2.WND_PROP_FULLSCREEN,
            #                       cv2.WINDOW_FULLSCREEN)
            # cv2.imshow("corners", img)
            # cv2.waitKey(0)
            # cv2.destroyWindow("corners")
            # cv2.waitKey(0)
            corners_cam_curr = self.sort_4_corners(corners_cam_curr)
            corners_displayed_curr = self.sort_4_corners(corners_displayed_curr)
        return ret_cam and ret_displayed, corners_cam_curr, corners_displayed_curr

    def sort_by_closest_to_top_left(self, corners):
        top_left = corners.min(axis=0)
        dist_to_top_left = np.power(corners-top_left.reshape(1, 1, 2), 2).sum(axis=2)
        sorted_inds = np.argsort(dist_to_top_left, axis=0).reshape(-1)
        return corners[sorted_inds[[0, -1]], :, :]

    def sort_by_closest_to_top_right(self, corners):
        top_right = np.array([corners.min(axis=0)[0,1], corners.max(axis=0)[0,0]])
        dist_to_top_right = np.power(corners-top_right.reshape(1, 1, 2), 2).sum(axis=2)
        sorted_inds = np.argsort(dist_to_top_right, axis=0).reshape(-1)
        return corners[sorted_inds[[0, -1]], :, :]

    def sort_4_corners(self, corners):
        dist_to_center = np.power(corners-corners.mean(axis=0).reshape(1, 1, 2), 2).sum(axis=2)
        sorted_inds = np.argsort(dist_to_center, axis=0).reshape(-1)
        return np.concatenate([self.sort_by_closest_to_top_left(corners[sorted_inds[:4], :, :]),
                              self.sort_by_closest_to_top_left(corners)], axis=0)
        # return self.sort_by_closest_to_top_left(corners[sorted_inds[:4], :, :])
        # return np.concatenate([self.sort_by_closest_to_top_left(corners[sorted_inds[:4], :, :]),
        #                       self.sort_by_closest_to_top_right(corners[sorted_inds[:4], :, :])], axis=0)



    def stop_and_clean_up(self):
        self.camera.stop()
        cv2.destroyWindow('chessboard_fullscreen')

    def create_local_chessboard_img(self, location_perc_screen_xy=np.array([.5, .5])):
        width = self.screen_width
        height = self.screen_height
        grid = self.create_chessboard_grid(3, 3, block_size=35)  # 51)  # create the minimum sized grid that can be used
        pad_x_before = int(np.floor((width - grid.shape[1]) * location_perc_screen_xy[0])+1)
        pad_x_after = int(np.floor((width - grid.shape[1]) * (1 - location_perc_screen_xy[0])))
        pad_y_before = int(np.floor((height - grid.shape[0]) * location_perc_screen_xy[1])+1)
        pad_y_after = int(np.floor((height - grid.shape[0]) * (1 - location_perc_screen_xy[1])))
        return np.uint8(np.lib.pad(grid, ((pad_y_before, pad_y_after), (pad_x_before, pad_x_after)),
                                   'maximum'))[:self.screen_height, :self.screen_width]

    def create_chessboard_grid(self, num_blocks_height, num_blocks_width, block_size=75):
        return np.tile(np.array([[0, 255], [255, 0]]).repeat(block_size, axis=0).repeat(block_size, axis=1),
                       (num_blocks_height, num_blocks_width))[:-block_size, :-block_size]

    def display_hands_with_homography(self, hands, mask):
        rbg = np.ones((self.screen_height, self.screen_width, 3)) * 255 * np.expand_dims(np.uint8(mask>0), axis=2)
        for hand in hands:
            hand_transformed_to_rgb = np.squeeze(cv2.transform(np.float32(hand.pointing_finger_pt).reshape(1, 1, 2), self.warp_mat_depth_2_cam), axis=1)
            hand_transformed_to_rgb = hand_transformed_to_rgb[:,:2].reshape((-1, 2))/hand_transformed_to_rgb[:,2].reshape((-1, 1))
            hand_transformed_to_display = cv2.transform(hand_transformed_to_rgb.reshape(1, 1, 2), self.warp_mat_cam_2_displayed)
            try:
                rbg = cv2.circle(rbg, (int(hand_transformed_to_display[0, 0, 0] / hand_transformed_to_display[0, 0, 2]),
                                       int(hand_transformed_to_display[0, 0, 1] / hand_transformed_to_display[0, 0, 2])),
                                 10, (0, 255, 0), -1)
            except:
                pass

        cv2.namedWindow("hands on screen", cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty("hands on screen", cv2.WND_PROP_FULLSCREEN,
                              cv2.WINDOW_FULLSCREEN)  # , cv2.WINDOW_FULLSCREEN)
        cv2.imshow('hands on screen', rbg)
        cv2.waitKey(1)

