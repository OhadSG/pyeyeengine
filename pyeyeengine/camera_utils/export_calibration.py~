import cv2
import numpy as np
import os
import configparser

from camera_utils.shape_detector import ShapeDetector
shapeDetector = ShapeDetector()

applications_ini_path = r'C:\Program Files (x86)\EyeClick\Applications\Global\applications.ini'
SceneMaskManual_bmp_path = r"C:\Program Files (x86)\EyeClick\Server\SceneMaskManual.bmp"
SceneMaskManual_png_path = r"C:\Program Files (x86)\EyeClick\Server\SceneMaskManual.png"
eyeclick_ini_path = r'C:\Program Files (x86)\EyeClick\Server\EyeClick.ini'
eyestep_ini_path = r'C:\Program Files (x86)\EyeClick\Server\EyeStep.ini'


def export_data_for_games_and_cpp_engine(calibrator):
    mask_for_cam = calibrator.table_mask
    table_contour_cam = calibrator.table_contour
    mask_for_display = playing_mask = find_max_playing_mask(calibrator)

    # Applications.ini
    applications_ini = configparser.ConfigParser()
    applications_ini.optionxform = str
    if os.path.isfile(applications_ini_path):
        applications_ini.read(applications_ini_path)
    _, surface_contour_display, _ = cv2.findContours(mask_for_display.copy(), cv2.RETR_CCOMP,
                                                     cv2.CHAIN_APPROX_NONE)
    surface_shape = shapeDetector.detect(table_contour_cam)
    contour_as_pts = np.squeeze(surface_contour_display[0], axis=1)
    rect_display = np.concatenate([contour_as_pts.min(axis=0), contour_as_pts.max(axis=0)], axis=0)  # minx miny width height

    '''pAR0 - bottom left
            pAR1 - top left
            pAR2 - top right
            pAR3 - bottom right
            00 at top left '''
    applications_ini['Application']['p0x'] = "%d" % int(rect_display[0])
    applications_ini['Application']['p0y'] = "%d" % int(rect_display[3])
    applications_ini['Application']['p1x'] = "%d" % int(rect_display[0])
    applications_ini['Application']['p1y'] = "%d" % int(rect_display[1])
    applications_ini['Application']['p2x'] = "%d" % int(rect_display[2])
    applications_ini['Application']['p2y'] = "%d" % int(rect_display[1])
    applications_ini['Application']['p3x'] = "%d" % int(rect_display[2])
    applications_ini['Application']['p3y'] = "%d" % int(rect_display[3])
    applications_ini['Application']['maskWidth'] = "%f" % ((rect_display[2] - rect_display[0]))
    applications_ini['Application']['maskHeight'] = "%f" % ((rect_display[3] - rect_display[1]))
    applications_ini['Application']['pAR0x'] = "%f" % (rect_display[0] / calibrator.screen_width)
    applications_ini['Application']['pAR0y'] = "%f" % (rect_display[3] / calibrator.screen_height)
    applications_ini['Application']['pAR1x'] = "%f" % (rect_display[0] / calibrator.screen_width)
    applications_ini['Application']['pAR1y'] = "%f" % (rect_display[1] / calibrator.screen_height)
    applications_ini['Application']['pAR2x'] = "%f" % (rect_display[2] / calibrator.screen_width)
    applications_ini['Application']['pAR2y'] = "%f" % (rect_display[1] / calibrator.screen_height)
    applications_ini['Application']['pAR3x'] = "%f" % (rect_display[2] / calibrator.screen_width)
    applications_ini['Application']['pAR3y'] = "%f" % (rect_display[3] / calibrator.screen_height)
    applications_ini['Application']['maskWidthAR'] = "%f" % ((rect_display[2] - rect_display[0]) / calibrator.screen_width)
    applications_ini['Application']['maskHeightAR'] = "%f" % ((rect_display[3] - rect_display[1]) / calibrator.screen_height)
    applications_ini['Application']['Height'] = "%d" % (calibrator.screen_height)
    applications_ini['Application']['Width'] = "%d" % (calibrator.screen_width)


    applications_ini['ProjOffset']['shape'] = 'false'  # isRound
    if surface_shape == 'rectangle':
        ratio = (rect_display[2] - rect_display[0]) / (rect_display[3] - rect_display[1])
        if ratio >= 16/9:
            applications_ini['Application']['Aspect'] = '1'
        elif ratio >= 4/3:
            applications_ini['Application']['Aspect'] = '0'
        else:
            applications_ini['Application']['Aspect'] = '2'
    elif surface_shape == 'circle':
        applications_ini['Application']['Aspect'] = '2'  # circle or square
        applications_ini['ProjOffset']['shape'] = 'True'
    else:  # floor
        applications_ini['Application']['Aspect'] = '0'  # doesn't really matter

    applications_ini['ProjOffset']['Aspect'] = applications_ini['Application']['Aspect']
    applications_ini['Application']['RoundMask'] = applications_ini['ProjOffset']['shape']

    # write images of playing mask
    playing_mask_cam = cv2.warpPerspective(playing_mask, np.linalg.inv(calibrator.warp_mat_cam_2_displayed),
                                           dsize=(mask_for_cam.shape[1], mask_for_cam.shape[0]))
    mask_to_save_to_img = cv2.cvtColor(np.uint8((playing_mask.copy() > 0) * 255), cv2.COLOR_GRAY2BGR)
    cv2.imwrite(SceneMaskManual_bmp_path, mask_to_save_to_img)
    mask_as_alpha = np.concatenate([np.zeros_like(mask_to_save_to_img),
                                    np.expand_dims(255 - mask_to_save_to_img[:, :, 0], axis=2)], axis=2)
    xOffset, yOffset = contour_as_pts.mean(axis=0)
    applications_ini['ProjOffset']['xOffset'] = '%f' % (xOffset / calibrator.screen_width - .5)
    applications_ini['ProjOffset']['yOffset'] = '%f' % (yOffset / calibrator.screen_height - .5)
    applications_ini['Application']['xOffset'] = '%f' % (xOffset / calibrator.screen_width - .5)
    applications_ini['Application']['yOffset'] = '%f' % (yOffset / calibrator.screen_height - .5)
    cv2.imwrite(SceneMaskManual_png_path, mask_as_alpha)
    with open(applications_ini_path, 'w') as configfile:
        applications_ini.write(configfile, space_around_delimiters=False)

    # EyeClick.ini
    eyeclick_ini = configparser.ConfigParser()
    eyeclick_ini.optionxform = str
    if os.path.isfile(eyeclick_ini_path):
        eyeclick_ini.read(eyeclick_ini_path)
    eyeclick_ini['ProjOffset']['xOffset'] = '%f' % (xOffset / calibrator.screen_width - .5)
    eyeclick_ini['ProjOffset']['yOffset'] = '%f' % (yOffset / calibrator.screen_height - .5)
    with open(eyeclick_ini_path, 'w') as configfile:
        eyeclick_ini.write(configfile, space_around_delimiters=False)

    # Eyestep.ini
    eyestep_ini = configparser.ConfigParser()
    eyestep_ini.optionxform = str
    if os.path.isfile(eyestep_ini_path):
        eyestep_ini.read(eyestep_ini_path)
    top_right, top_left, bottom_right, bottom_left = get_4_corners_of_screen_in_depthmap_upright(calibrator)
    camera_img_width = 320
    camera_img_height = 240
    eyestep_ini['Zone1']['zoneVertex1'] = "%f,%f" % (
    bottom_left[0, 0, 0] / camera_img_width, bottom_left[0, 0, 1] / camera_img_height)
    eyestep_ini['Zone1']['zoneVertex2'] = "%f,%f" % (
    top_left[0, 0, 0] / camera_img_width, top_left[0, 0, 1] / camera_img_height)
    eyestep_ini['Zone1']['zoneVertex3'] = "%f,%f" % (
    top_right[0, 0, 0] / camera_img_width, top_right[0, 0, 1] / camera_img_height)
    eyestep_ini['Zone1']['zoneVertex4'] = "%f,%f" % (
    bottom_right[0, 0, 0] / camera_img_width, bottom_right[0, 0, 1] / camera_img_height)

    if calibrator.projection_flip_type == 'ud' or calibrator.projection_flip_type == 'lr_ud':
        eyestep_ini['Camera1']['flipud'] = 'True'
    else:
        eyestep_ini['Camera1']['flipud'] = 'False'

    if calibrator.projection_flip_type == 'lr' or calibrator.projection_flip_type == 'lr_ud':
        eyestep_ini['Camera1']['fliplr'] = 'True'
    else:
        eyestep_ini['Camera1']['fliplr'] = 'False'
    with open(eyestep_ini_path, 'w') as configfile:
        eyestep_ini.write(configfile, space_around_delimiters=False)

def find_max_playing_mask(calibrator, display=False):
    mask_for_cam = calibrator.table_mask
    table_contour_cam = calibrator.table_contour
    mask_for_display = cv2.warpPerspective(mask_for_cam[:, :, 0], calibrator.warp_mat_cam_2_displayed,
                                           dsize=(calibrator.screen_width, calibrator.screen_height))

    _, surface_contour_display, _ = cv2.findContours(mask_for_display, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE)

    if calibrator.table_contour is not None:    
        surface_contour_display = cv2.transform(np.float32(calibrator.table_contour), calibrator.warp_mat_cam_2_displayed)
        surface_contour_display = surface_contour_display[:, 0, :2].reshape(-1,1,2) / \
                              surface_contour_display[:, 0, 2].reshape((-1,1,1))

    surface_shape = shapeDetector.detect(table_contour_cam)

    playing_mask = np.tile(np.expand_dims(np.zeros_like(mask_for_display), axis=2), (1, 1, 3))
    if surface_shape == 'rectangle':
        bounding_box = find_optimal_playing_screen(surface_contour_display)
        playing_mask = cv2.rectangle(playing_mask, (int(round(bounding_box[0])), int(round(bounding_box[1]))),
                                     (int(round(bounding_box[0] + bounding_box[2])), int(round(bounding_box[1] + bounding_box[3]))),
                                     (255, 255, 255), -1)[:, :, 0]
    elif surface_shape == 'circle':
        center, radius, _, _ = shapeDetector.fit_ellipse_to_contour(surface_contour_display)
        ellips_bounding_box = cv2.fitEllipse(np.float32(surface_contour_display))
        playing_mask = cv2.ellipse(playing_mask, ellips_bounding_box, (255, 255, 255), -1)[:, :, 0]

        # ellipse = np.array(np.where(playing_mask))
        # rect_display = np.concatenate([ellipse.min(axis=1), ellipse.max(axis=1)-ellipse.min(axis=1)], axis=0)
        # ellips_bounding_box = (ellips_bounding_box[0], ellips_bounding_box[1], 90)
        # playing_mask = cv2.ellipse(np.zeros_like(playing_mask), ellips_bounding_box, (255, 255, 255), -1)
    else:
        playing_mask = np.ones_like(mask_for_display) * 255

    if display:
        cv2.namedWindow("mask_for_display", cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty("mask_for_display", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
        playing_mask = np.tile(np.expand_dims(playing_mask, axis=2), (1,1,3))
        playing_mask = cv2.drawContours(image=playing_mask, contours=[np.int32(np.round(surface_contour_display))], contourIdx=0,
                                           color=(255, 0, 255),
                                           thickness=1)
        cv2.imshow('mask_for_display', playing_mask)
        cv2.waitKey(0)
    return playing_mask

def fit_circle_smart(pts):
    a = np.linalg.lstsq( np.concatenate([pts, np.ones((pts.shape[0],1))], axis=1),
                         (-1*(pts**2).sum(axis=1)).reshape((-1,1)))[0]
    xc = -.5 * a[0]
    yc = -.5 * a[1]
    R = np.sqrt((a[:2]**2).sum()/4 - a[2])
    # a = [x y ones(size(x))]\[-(x. ^ 2 + y. ^ 2)];
    # xc = -.5 * a(1);
    # yc = -.5 * a(2);
    # R = sqrt((a(1) ^ 2 + a(2) ^ 2) / 4 - a(3));
    return np.array([xc,yc]), R


def get_4_corners_of_screen_in_depthmap(calibrator):
    bottom_left = cv2.transform(np.array([[[0, calibrator.screen_height]]]), np.linalg.inv(calibrator.warp_mat_cam_2_displayed))
    bottom_right = cv2.transform(np.array([[[calibrator.screen_width, calibrator.screen_height]]]),
                                 np.linalg.inv(calibrator.warp_mat_cam_2_displayed))
    top_left = cv2.transform(np.array([[[0, 0]]]),
                             np.linalg.inv(calibrator.warp_mat_cam_2_displayed))
    top_right = cv2.transform(np.array([[[calibrator.screen_width, 0]]]),
                              np.linalg.inv(calibrator.warp_mat_cam_2_displayed))
    return top_right, top_left, bottom_right, bottom_left


def get_4_corners_of_screen_in_depthmap_upright(calibrator):
    corners = np.squeeze(np.concatenate(get_4_corners_of_screen_in_depthmap(calibrator), axis=0), axis=1)[:,:2]
    if calibrator.projection_flip_type == 'ud' or calibrator.projection_flip_type == 'lr_ud':
        corners[:,1] = 240-corners[:,1]
    if calibrator.projection_flip_type == 'lr' or calibrator.projection_flip_type == 'lr_ud':
        corners[:, 0] = 320 - corners[:, 0]
    return corners[0, :].reshape(1, 1, -1), corners[1, :].reshape(1, 1, -1), \
           corners[2, :].reshape(1, 1, -1), corners[3, :].reshape(1, 1, -1)


def calc_2_longer_sides_of_rect(corners):
    p1 = corners[0, :]
    p2_options = corners[1:, :]
    ind = np.argsort(dist_pt_pts(p1, p2_options))
    p2 = p2_options[ind[1], :]
    return two_pts_to_line(p1, p2), two_pts_to_line(p2_options[ind[0], :], p2_options[ind[-1], :])


def find_optimal_playing_screen(table_contour):
    rect = cv2.minAreaRect(np.int32(table_contour))
    corners = np.int0(cv2.boxPoints(rect))
    centroid_xy = corners.mean(axis=0)

    bounding_boxes = []
    areas = []
    aspect_ratios = [np.array([1, 1]), np.array([4, 3]), np.array([16, 9])]

    for aspect_ratio_xy in aspect_ratios:
        play_screen_corner_1, play_screen_corner_2 = find_opposite_corners_of_play_screen(corners, centroid_xy,
                                                                                               aspect_ratio_xy)
        bounding_box = opposite_corners_to_bounding_box(np.array(play_screen_corner_1).reshape(1, 2),
                                                             np.array(play_screen_corner_2).reshape(1, 2))
        bounding_boxes.append(bounding_box)
        areas.append(bounding_box[-1] * bounding_box[-2])

    return bounding_boxes[np.array(areas).argmax()]


def opposite_corners_to_bounding_box(play_screen_corner_1, play_screen_corner_2):
    corners = np.concatenate([play_screen_corner_1, play_screen_corner_2], axis=0)
    minxy = corners.min(axis=0)
    maxxy = corners.max(axis=0)
    return [int(np.ceil(minxy[0])), int(np.ceil(minxy[1])), int(np.floor(maxxy[0] - minxy[0])), int(np.floor(maxxy[1] - minxy[1]))]


def get_cross_section_lines(center_of_surface, aspect_ratio_xy):
    line1 = [aspect_ratio_xy[1] / aspect_ratio_xy[0],
             (center_of_surface[1] - aspect_ratio_xy[1] / aspect_ratio_xy[0] * center_of_surface[0])]
    line2 = [-aspect_ratio_xy[1] / aspect_ratio_xy[0],
             (center_of_surface[1] + aspect_ratio_xy[1] / aspect_ratio_xy[0] * center_of_surface[0])]
    return line1, line2  # format : [m, b] -> y = mx + b


def find_opposite_corners_of_play_screen(corners, center, aspect_ratio_xy):
    side_line_1, side_line_2 = calc_2_longer_sides_of_rect(corners)
    cross_section_line_1, cross_section_line_2 = get_cross_section_lines(center, aspect_ratio_xy)

    play_screen_corner_1_1 = line_intersect(side_line_1, cross_section_line_1)
    play_screen_corner_1_2 = line_intersect(side_line_1, cross_section_line_2)

    if dist_pt_pts(center, play_screen_corner_1_1) < dist_pt_pts(center, play_screen_corner_1_2):
        play_screen_corner_1 = play_screen_corner_1_1
        play_screen_corner_2 = line_intersect(side_line_2, cross_section_line_1)
    else:
        play_screen_corner_1 = play_screen_corner_1_2
        play_screen_corner_2 = line_intersect(side_line_2, cross_section_line_2)

    return play_screen_corner_1, play_screen_corner_2


def dist_pt_pts(pt, pts):
    return np.linalg.norm(pt - pts, axis=1)


def two_pts_to_line(pt1, pt2):
    m = (pt2[1] - pt1[1]) / (pt2[0] - pt1[0])
    b = pt1[1] - m * pt1[0]
    return [m, b]


def line_intersect(line1, line2):
    m1, b1 = line1  # slope, y-intersect
    m2, b2 = line2
    if m1 == m2:  # parallel line
        return None
    x = (b2 - b1) / (m1 - m2)
    y = m1 * x + b1
    return np.array([x, y]).reshape((1, 2))

